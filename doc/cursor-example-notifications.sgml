<refentry id="cursor-example-notifications" revision="20 June 2013">
  <refmeta>
    <refentrytitle>Addressbook Server Notifications</refentrytitle>
    <refmiscinfo>Handling notifications of addressbook modifications and locale changes</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>Addressbook Server Notifications</refname>
    <refpurpose>
      Handling notifications of addressbook modifications and locale changes
    </refpurpose>
  </refnamediv>

  <refsect1 id="addressbook-modifications">
    <title>Handling Modifications of the Addressbook</title>

    <para>
      Normally change notifications will be delivered to the EBookClientCursor object
      in the main user facing APIs which are yet to be developped at this time. However
      it is possible to handle change notifications currently using the EBookClientView
      APIs, or by some other system IPC service which broadcasts a notification whenever
      the system addressbook is known to have been modified (after the modification is
      known to have completed).
    </para>

    <para>
      The important part is that any active contact views must be reloaded at any
      time the addressbook is modified, since contacts may have changed their names,
      causing them to appear in different places in the contact list, or contacts
      may have been added or removed from the active view.
    </para>

    <para>
      To reload the page at the current cursor position, e_book_backend_sqlitedb_cursor_move_by()
      can be called using the EBSDB_CURSOR_ORIGIN_PREVIOUS origin as was
      <link linkend="cursor-navigation">described here</link>.
    </para>
  </refsect1>

  <refsect1 id="addressbook-locale-changes">
    <title>Handling System Locale Changes</title>

    <para>
      System locale changes will also probably be more practical to handle for
      users of the EBookClientCursor user facing API which is yet to be developped,
      but for now it is possible to handle a locale change on the EBookClient object
      directly.
    </para>

    <para>
      Note that is important to receive the locale change notification from
      the addressbook service and not from the systemd service. This is because
      when the addressbook service delivers the notification you can be sure
      that the SQLite DB has already been modified for the new locale, so there
      will be no race condition.
    </para>

    <para>
      To instantiate an EBookClient object, you need an ESource just like the one
      <link linkend="create-ebsdb">described here</link>:
      <informalexample>
	<programlisting><![CDATA[GError *error = NULL;
EClient *client;

/* Create and connect to the EBookClient */
client = e_book_client_connect_sync (source, NULL, &error);

if (!client)
  g_warning ("Oh no, looks like the addressbook service isnt running: %s", error->message);]]></programlisting>
      </informalexample>
    </para>

    <para>
      Once you have an EBookClient, you can listen to locale changes:
      <informalexample>
	<programlisting><![CDATA[static void
book_client_locale_changed (EBookClient *client,
                            GParamSpec  *pspec,
                            gpointer     user_data)
{
  const gchar *new_locale;
  ExampleStructure *example = (ExampleStructure *)user_data;

  /* A locale changed, now fetch the new locale */
  new_locale = e_book_client_get_locale (client);
}

/* When you have an EBookClient, connect to locale change notifications
 */
g_signal_connect (client, "notify::locale",
                  G_CALLBACK (book_client_locale_changed), NULL);]]></programlisting>
      </informalexample>
    </para>

    <para>
      Once you have successfully received a locale change, you must update
      your local EBookBackendSqliteDB instance with the new locale:
      <informalexample>
	<programlisting><![CDATA[GError *error = NULL;

/* Set the new locale on our local SQLite handle */
if (!e_book_backend_sqlitedb_set_locale (ebsdb,
                                         SQLITEDB_FOLDER_ID,
                                         new_locale,
                                         &error))
  {
    g_warning ("Uh oh, something went wrong setting the locale: %s", error->message);
    g_error_free (error);
  }]]></programlisting>
      </informalexample>
      Note that this will only update the internal state and will not modify the
      underlying SQLite data, since that modification was made by the addressbook
      server already before sending the locale change notification.
    </para>

    <para>
      Now that the local EBookBackendSqliteDB instance has the correct new locale
      setting it's important to fetch and <link linkend="load-alphabet">load the new active alphabet</link>,
      surely since we are no longer a Greek addressbook, but now a Korean addressbook, the active
      alphabet will be a different one.
    </para>

    <para>
      Furthermore, the cursor positional data is based on locale specific
      sort keys, so after a locale change the cursor position is invalid.
      You must now reset and refresh any active contact view:
      <informalexample>
	<programlisting><![CDATA[GError *error = NULL;

/* Reset the cursor and fetch the first 10 results.
 */
if (!e_book_backend_sqlitedb_cursor_move_by (ebsdb, cursor,
                                             EBSDB_CURSOR_ORIGIN_RESET,
					     10, NULL, &error))
  {
    g_warning ("Uh Oh... there was some error resetting the cursor: %s", error->message);
    g_error_free (error);
  }
else
  {
    /* Load contacts ... */
  }
]]></programlisting>
      </informalexample>
    </para>
  </refsect1>

  <refsect1 id="addressbook-locale-changes-thread">
    <title>Handling System Locale Changes behind a thread Barrier</title>

    <para>
      The EBookClient object requires that a GMainLoop be running in order to receive local change
      notifications from the addressbook server. It's possible that the view application is not
      running a GMainLoop but some other kind of event loop, in which case the EBookClient can be
      created behind a thread barrier and run a main loop in it's own thread:
      <informalexample>
	<programlisting><![CDATA[static void
book_client_locale_changed (EBookClient *client,
                            GParamSpec  *pspec,
                            gpointer     user_data)
{
  const gchar *new_locale;

  /* Get the new locale */
  new_locale = e_book_client_get_locale (client);

  /* Locale notification was received in a thread... find 
   * some way to deliver this notification to your main
   * application thread...
   */
}

gpointer
book_client_thread (gpointer user_data)
{
  GMainContext *context;
  GMainLoop *loop;
  ESource *source = (ESource *)user_data;
  EBookClient *client;

  /* Create GMainContext / GMainLoop */
  context = g_main_context_new ();
  loop = g_main_loop_new (context, FALSE);

  /* Set this context as default for this thread */
  g_main_context_push_thread_default (context);

  /* Create the client in it's own thread context, so that D-Bus
   * messages are delivered to the client in this thread
   */
  client = e_book_client_connect_sync (source, NULL, &error);

  if (!client)
    g_warning ("Oh no, looks like the addressbook service isnt running: %s", error->message);

  /* Listen for locale change notifications
   */
  g_signal_connect (client, "notify::locale",
                    G_CALLBACK (book_client_locale_changed), NULL);

  /* Now run the loop where notifications can be received.
   */
  g_main_loop_run (loop);

  /* Clean up mainloop resources */
  g_main_context_pop_thread_default (context);
  g_main_context_unref (loop);
  g_main_loop_unref (loop);

  return NULL;
}

/* Somewhere at program initialization... where an ESource is handy */
GThread *thread;

/* Of course this is a wee bit more tricky than outlined here, you can
 * cause the thread to quit if the GMainLoop pointer is shared, and
 * just call g_main_loop_quit() on the thread's loop to cause the thread
 * to exit.
 */
thread = g_thread_new ("book-client-thread",
                        book_client_thread,
                        source);]]></programlisting>
      </informalexample>
    </para>
  </refsect1>

</refentry>
